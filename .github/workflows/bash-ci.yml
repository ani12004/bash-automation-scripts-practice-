# .github/workflows/bash-ci.yml

# A human-readable name for your workflow
name: Bash Script CI

# This workflow runs on any push or pull request to the 'main' branch.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Defines the tasks to be performed.
jobs:
  lint-and-test:
    # Use the latest Ubuntu runner provided by GitHub.
    runs-on: ubuntu-latest

    # Environment variable pointing to the location of your scripts.
    # Set to '.' because your scripts are in the root directory.
    env:
      SCRIPT_DIR: .

    # The sequence of actions for this job.
    steps:
      # Step 1: Check out your repository code so the workflow can access it.
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Install the tools we'll use for linting and formatting.
      - name: Install ShellCheck and shfmt
        run: sudo apt-get update && sudo apt-get install -y shellcheck shfmt

      # Step 3: Make all script files executable.
      # Uses 'find' to act only on files ending with .sh.
      - name: Make scripts executable
        run: find ${{ env.SCRIPT_DIR }} -type f -name "*.sh" -exec chmod +x {} +

      # Step 4: Lint scripts to find common bugs and issues.
      # This command safely handles cases where no .sh files might exist.
      - name: Lint scripts with ShellCheck ‚úÖ
        run: find ${{ env.SCRIPT_DIR }} -type f -name "*.sh" -exec shellcheck {} +

      # Step 5: Check if scripts are formatted correctly.
      # The '-d' flag fails the job if any file needs reformatting.
      - name: Check formatting with shfmt üíÖ
        run: shfmt -d ${{ env.SCRIPT_DIR }}

      # Step 6: Run your tests.
      # This is a placeholder that you should customize with your actual tests.
      - name: Run tests ‚öôÔ∏è
        run: |
          # First, check if there are any scripts to test.
          if ! find "${{ env.SCRIPT_DIR }}" -type f -name "*.sh" -print -quit | grep -q .; then
            echo "No shell scripts found to test."
            exit 0
          fi
          
          echo "Running basic execution test for all scripts..."
          for script in ${{ env.SCRIPT_DIR }}/*.sh; do
            # Ensure we are only trying to run actual files.
            if [ -f "$script" ]; then
              echo "--- Running $script ---"
              bash "$script"
            fi
          done
